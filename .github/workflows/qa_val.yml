name: QA Validation Job

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      space:
        type: string
        required: true
      object_type:
        type: string
        required: true
      job_type:
        type: string
        required: true
      test_type:
        type: string
        required: true
      deploy:
        type: boolean
        required: true
      skip_test:
        type: boolean
      deployment_file:
        type: string
        required: true
    secrets:
      DATABRICKS_HOST:
        required: true
      DATABRICKS_TOKEN:
        required: true
      GH_TOKEN:
        required: true

jobs:
  qa-deploy-config:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}_${{ inputs.space }}
    env:
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e ".[dev]"

      # Install Databricks CLI (unified CLI for DAB)
      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          echo "$HOME/.databrickscli" >> $GITHUB_PATH

      # Configure Databricks authentication for DAB
      - name: Configure Databricks Authentication
        run: |
          databricks configure --token <<EOF
          ${{ secrets.DATABRICKS_HOST }}
          ${{ secrets.DATABRICKS_TOKEN }}
          EOF
          
      - name: Verify Databricks CLI
        run: |
          databricks --version
          databricks auth profiles

      - name: Build Wheel
        run: python setup.py bdist_wheel

      - name: Validate Bundle Configuration
        run: databricks bundle validate -t dev_feature

      - name: Deploy Bundle
        run: databricks bundle deploy -t dev_feature

      - name: Run Job
        if: ${{ !inputs.skip_test }}
        run: |
          databricks bundle run -t dev_feature data_pipeline-rep-smoke-dev-feature-val-v1 \
          --pipeline-params='{"env": "dev", "space": "feature", "object_type": "re", "job_type": "rep", "test_type": "smoke"}'